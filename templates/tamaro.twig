<div class="wp-block-planet4-gpch-tamaro-tamaro-widget">

	<div class="rnw-widget-container"></div>

	<script src="https://tamaro.raisenow.com/greenpeace-ch-default/v29/widget.js"></script>

	<script>
		window.rnw.tamaro.runWidget('.rnw-widget-container', {
			debug: {{ tamaroAttributes.debug }},
			testMode: {{ tamaroAttributes.testMode }},
			language: '{{ tamaroAttributes.language }}',
			defaultPaymentType: '{{ tamaroAttributes.defaultPaymentType }}',
			defaultRecurringInterval: '{{ tamaroAttributes.defaultRecurringInterval }}',
			showStoredCustomerEmailPermission: true,
			showStoredCustomerDonationReceipt: false,
			show_submit_button: false,
			show_footer: false,
			paymentFormPrefill: {
				stored_customer_email_permission: true,
				stored_customer_donation_receipt: true,
				stored_sf_Contact_Source__c: 'Internet',
				gpch_product: '{{ tamaroAttributes.salesforceProduct }}',
				stored_sf_Opportunity_Product__c: '',
				stored_sf_npe03__Recurring_Donation__c_Product__c: ''
			},
			forceShowBlocks: {
				payment_amounts_and_intervals: true,
				slot_gpch_next_step_button: true,
				payment_purposes: false,
				payment_payment_methods: false,
				payment_profile: false,
				payment_address: false,
				payment_cover_fee: false
			},
			purposes: ['p1'],
			purposeDetails: {
				p1: {
					stored_campaign_id: '{{ tamaroAttributes.salesforceCampaignID }}'
				}
			},
			slots: {
				slot_gpch_next_step_button: [{
					component: "block",
					children: [{
						component: "block_content",
						children: [{
							component: "content",
							text_html: "gpch_next_step_button"
						}]
					}]
				}]
			},
			translations: {
				en: {
					purposes: {
						p1: 'Greenpeace Switzerland'
					},
					blocks: {
						payment_profile: {
							email_permission_info_html: "<p>I would like Greenpeace Switzerland to inform me by e-mail about ongoing projects.</p>\n"
						}
					},
					gpch_next_step_button: '<button type="button" class="btn btn-block btn-primary" onClick="gpchTamaro.nextStep()"><span class="btn-text">Next Step</span></button>'
				},
				de: {
					purposes: {
						p1: 'Greenpeace Schweiz'
					},
					blocks: {
						payment_profile: {
							email_permission_info_html: "<p>Ich möchte, dass Greenpeace Schweiz mich per E-Mail über laufende Projekte informiert.</p>\n"
						}
					}
				},
				fr: {
					purposes: {
						p1: 'Greenpeace Suisse'
					},
					blocks: {
						payment_profile: {
							email_permission_info_html: "<p>Je veux que Greenpeace Suisse m'informe par e-mail des projets en cours.</p>\n"
						}
					}
				},
				it: {
					purposes: {
						p1: 'Greenpeace Svizzera'
					},
					blocks: {
						payment_profile: {
							email_permission_info_html: "<p>Desidero che Greenpeace Svizzera mi informi via e-mail sui progetti in corso.</p>\n"
						}
					}
				}
			},
			amounts: [
				{
					"if": "paymentType() == onetime",
					"then": [{{ tamaroAttributes.amountsOnetime }}]
				},
				{
					"if": "paymentType() == recurring && recurringInterval() == monthly",
					"then": [{{ tamaroAttributes.amountsRecurringMonthly }}]
				},
				{
					"if": "paymentType() == recurring && recurringInterval() == quarterly",
					"then": [{{ tamaroAttributes.amountsRecurringQuarterly }}]
				},
				{
					"if": "paymentType() == recurring && recurringInterval() == semestral",
					"then": [{{ tamaroAttributes.amountsRecurringSemestral }}]
				},
				{
					"if": "paymentType() == recurring && recurringInterval() == yearly",
					"then": [{{ tamaroAttributes.amountsRecurringYearly }}]
				}
			],
			minimumCustomAmount: [
				{
					"if": "paymentType() == onetime",
					"then": {{ tamaroAttributes.minimumCustomAmountOnetime }}
				},
				{
					"if": "paymentType() == recurring && recurringInterval() == monthly",
					"then": {{ tamaroAttributes.minimumCustomAmountRecurringMonthly }}
				},
				{
					"if": "paymentType() == recurring && recurringInterval() == quarterly",
					"then": {{ tamaroAttributes.minimumCustomAmountRecurringQuarterly }}
				},
				{
					"if": "paymentType() == recurring && recurringInterval() == semestral",
					"then": {{ tamaroAttributes.minimumCustomAmountRecurringSemestral }}
				},
				{
					"if": "paymentType() == recurring && recurringInterval() == yearly",
					"then": {{ tamaroAttributes.minimumCustomAmountRecurringYearly }}
				}
			]
		});

		var gpchTamaro = gpchTamaro || {};

		gpchTamaro.callbackBeforePaymentValidateAndSend = function (event) {

			var payment_type = window.rnw.tamaro.instance.paymentForm.data.payment_type;

			if (payment_type === 'onetime') {
				window.rnw.tamaro.instance.paymentForm.data.stored_sf_Opportunity_Product__c = window.rnw.tamaro.instance.paymentForm.data.gpch_product;
				window.rnw.tamaro.instance.paymentForm.data.stored_sf_npe03__Recurring_Donation__c_Product__c = '';
			}

			if (payment_type === 'recurring') {
				window.rnw.tamaro.instance.paymentForm.data.stored_sf_npe03__Recurring_Donation__c_Product__c = window.rnw.tamaro.instance.paymentForm.data.gpch_product;
				window.rnw.tamaro.instance.paymentForm.data.stored_sf_Opportunity_Product__c = '';
			}
		}

		window.rnw.tamaro.events.beforePaymentValidateAndSend.subscribe(gpchTamaro.callbackBeforePaymentValidateAndSend);

		gpchTamaro.nextStep = function() {

			rnw.tamaro.instance.config.forceShowBlocks = {
				slot_gpch_next_step_button: false,
				payment_payment_methods: true,
				payment_profile: true,
				payment_address: true,
				payment_cover_fee: true
			};

			rnw.tamaro.instance.config.showSubmitButton = true;
			rnw.tamaro.instance.config.showFooter = true;
		}

		// Generate a gp_user_id from the email address
		async function generate_gp_user_id(email) {
			function bufferToBase64(buffer) {
				return btoa(String.fromCharCode.apply(null, new Uint8Array(buffer)));
			}

			try {
				const hashBuffer = await crypto.subtle.digest('SHA-256', new TextEncoder().encode(email));
				let hashString = bufferToBase64(hashBuffer);
				hashString = hashString.replace(/\//g, '');
				return hashString;
			} catch (error) {
				return '';
			}
		}

		// DataLayer Event for web analytics
		window.rnw.tamaro.events["paymentComplete"].subscribe(async function (event) {
			let donation_type = "Single";
			donation_frequency = "One-time";
			if (event.data.api.paymentForm !== null) {
				if (event.data.api.paymentForm.data.payment_type === "recurring") {
					donation_type = "Recurring";
					donation_frequency = event.data.api.paymentForm.data.recurring_interval;
				}
			}


			const hashed_email = await generate_gp_user_id(event.data.api.paymentForm.data.stored_customer_email);

			if (event.data.api.transactionInfo.epayment_status === "success") {
				window.dataLayer = window.dataLayer || [];
				window.dataLayer.push({
					'event': 'donation_completed',
					'donation_type': donation_type,
					'donation_value': event.data.api.transactionInfo.amount,
					'donation_currency': event.data.api.transactionInfo.currency,
					'donation_frequency': donation_frequency,
					'donation_payment_method': event.data.api.transactionInfo.payment_method,
					'donation_campaign_id': event.data.api.paymentForm.data.stored_campaign_id,
					'donation_product': event.data.api.paymentForm.data.gpch_product,
					'donation_transaction_id': event.data.api.transactionInfo.epp_transaction_id,
					'gp_user_id': hashed_email
				});
			}
		});

	</script>
</div>

