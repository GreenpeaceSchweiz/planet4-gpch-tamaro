<div class="wp-block-planet4-gpch-tamaro-tamaro-widget">

	<div class="rnw-widget-container"></div>

	<script src="https://tamaro.raisenow.com/greenpeace-ch-default/latest/widget.js"></script>

	<script>
		window.rnw.tamaro.runWidget('.rnw-widget-container', {
			debug: {{ tamaroAttributes.debug }},
			testMode: {{ tamaroAttributes.testMode }},
			language: '{{ tamaroAttributes.language }}',
			defaultPaymentType: '{{ tamaroAttributes.defaultPaymentType }}',
			defaultRecurringInterval: '{{ tamaroAttributes.defaultRecurringInterval }}',
			showStoredCustomerEmailPermission: true,
			showStoredCustomerDonationReceipt: false,
			show_submit_button: false,
			show_footer: false,
			paymentFormPrefill: {
				stored_customer_email_permission: true,
				stored_customer_donation_receipt: true,
				stored_sf_Contact_Source__c: 'Internet',
				gpch_product: '{{ tamaroAttributes.salesforceProduct }}',
				stored_sf_Opportunity_Product__c: '',
				stored_sf_npe03__Recurring_Donation__c_Product__c: ''
			},
			paymentMethods: [
				'twint',
				'card',
				{
					"if": "paymentType() != recurring",
					"then": [
						"chqr"
					]
				},
				{
					"if": "paymentType() == recurring",
					"then": [
						"dd"
					]
				},
				{
					"if": "paymentType() != recurring",
					"then": [
						"paypal"
					]
				},
			],
			forceShowBlocks: {
				payment_amounts_and_intervals: true,
				slot_gpch_next_step_button: true,
				payment_purposes: false,
				payment_payment_methods: false,
				payment_profile: false,
				payment_address: false,
				payment_cover_fee: false
			},
			purposes: ['p1'],
			purposeDetails: {
				p1: {
					stored_campaign_id: '{{ tamaroAttributes.salesforceCampaignID }}'
				}
			},
			slots: {
				slot_gpch_next_step_button: [{
					component: "block",
					children: [{
						component: "block_content",
						children: [{
							component: "content",
							text_html: "gpch_next_step_button"
						}]
					}]
				}]
			},
			translations: {
				en: {
					purposes: {
						p1: 'Greenpeace Switzerland'
					},
					blocks: {
						payment_profile: {
							email_permission_info_html: "<p>I would like Greenpeace Switzerland to inform me by e-mail about ongoing projects.</p>\n"
						}
					},
					gpch_next_step_button: '<button type="button" class="btn btn-block btn-primary" onClick="gpchTamaro.nextStep()"><span class="btn-text">Next Step</span></button>'
				},
				de: {
					purposes: {
						p1: 'Greenpeace Schweiz'
					},
					blocks: {
						payment_profile: {
							email_permission_info_html: "<p>Ich möchte, dass Greenpeace Schweiz mich per E-Mail über laufende Projekte informiert.</p>\n"
						}
					}
				},
				fr: {
					purposes: {
						p1: 'Greenpeace Suisse'
					},
					blocks: {
						payment_profile: {
							email_permission_info_html: "<p>Je veux que Greenpeace Suisse m'informe par e-mail des projets en cours.</p>\n"
						}
					}
				},
				it: {
					purposes: {
						p1: 'Greenpeace Svizzera'
					},
					blocks: {
						payment_profile: {
							email_permission_info_html: "<p>Desidero che Greenpeace Svizzera mi informi via e-mail sui progetti in corso.</p>\n"
						}
					}
				}
			},
			amounts: [
				{
					"if": "paymentType() == onetime",
					"then": [{{ tamaroAttributes.amountsOnetime }}]
				},
				{
					"if": "paymentType() == recurring && recurringInterval() == monthly",
					"then": [{{ tamaroAttributes.amountsRecurringMonthly }}]
				},
				{
					"if": "paymentType() == recurring && recurringInterval() == quarterly",
					"then": [{{ tamaroAttributes.amountsRecurringQuarterly }}]
				},
				{
					"if": "paymentType() == recurring && recurringInterval() == semestral",
					"then": [{{ tamaroAttributes.amountsRecurringSemestral }}]
				},
				{
					"if": "paymentType() == recurring && recurringInterval() == yearly",
					"then": [{{ tamaroAttributes.amountsRecurringYearly }}]
				}
			],
			minimumCustomAmount: [
				{
					"if": "paymentType() == onetime",
					"then": {{ tamaroAttributes.minimumCustomAmountOnetime }}
				},
				{
					"if": "paymentType() == recurring && recurringInterval() == monthly",
					"then": {{ tamaroAttributes.minimumCustomAmountRecurringMonthly }}
				},
				{
					"if": "paymentType() == recurring && recurringInterval() == quarterly",
					"then": {{ tamaroAttributes.minimumCustomAmountRecurringQuarterly }}
				},
				{
					"if": "paymentType() == recurring && recurringInterval() == semestral",
					"then": {{ tamaroAttributes.minimumCustomAmountRecurringSemestral }}
				},
				{
					"if": "paymentType() == recurring && recurringInterval() == yearly",
					"then": {{ tamaroAttributes.minimumCustomAmountRecurringYearly }}
				}
			],
			coverFeePercentage: [
					{
					"if": "paymentMethod() == twint", // TWINT
					"then": 2
				},
				{
					"if": "paymentMethod() == card", // Credit Card (vis & eca)
					"then": 2
				},
				{
					"if": "paymentMethod() == chqr", // QR-Bill
					"then": 0
				},
				{
					"if": "paymentMethod() == paypal", // PayPal
					"then": 2
				},
				{
					"if": "paymentMethod() == dd", // DD & LSV
					"then": 0
				},
				5
			]
		});

		var gpchTamaro = gpchTamaro || {};

		// The currently selected payment method
		let tamaroPaymentMethod = null;

		// True if showing the whole form, false if only the first block
		let tamaroFullForm = false;

		window.rnw.tamaro.events.paymentMethodChanged.subscribe(function (event) {
			if (tamaroFullForm) {
				// Hide the cover fees block for payment methods that have 0% fees
				if (tamaroPaymentMethod === 'chqr' || tamaroPaymentMethod === 'dd') {
					rnw.tamaro.instance.config.forceShowBlocks = {
						payment_cover_fee: false
					};
				}
				else {
					rnw.tamaro.instance.config.forceShowBlocks = {
						payment_cover_fee: true
					};
				}

			}
		});

		gpchTamaro.callbackBeforePaymentValidateAndSend = function (event) {

			var payment_type = window.rnw.tamaro.instance.paymentForm.data.payment_type;

			if (payment_type === 'onetime') {
				window.rnw.tamaro.instance.paymentForm.data.stored_sf_Opportunity_Product__c = window.rnw.tamaro.instance.paymentForm.data.gpch_product;
				window.rnw.tamaro.instance.paymentForm.data.stored_sf_npe03__Recurring_Donation__c_Product__c = '';
			}

			if (payment_type === 'recurring') {
				if (typeof event.data.api.paymentForm.data.exp !== "undefined" && event.data.api.paymentForm.data.exp !== "") {
					const exp_date = event.data.api.paymentForm.data.exp;
					const [exp_month, exp_year] = exp_date.split("/").map(Number);

					// exp_year can be yy or yyyy. Add 2000 to a 2 digit year.
					const full_year = exp_year < 100 ? 2000 + exp_year : exp_year;

					// Get the last day of the given month
					const last_day = new Date(full_year, exp_month, 0).getDate();

					// Format as YYYY-MM-DD
					formatted_exp_date = `${full_year}-${String(exp_month).padStart(2, "0")}-${last_day}`;

					window.rnw.tamaro.instance.paymentForm.data.stored_sf_npe03__Recurring_Donation__c_CC_Exp__c = formatted_exp_date;
				}

				window.rnw.tamaro.instance.paymentForm.data.stored_sf_npe03__Recurring_Donation__c_Product__c = window.rnw.tamaro.instance.paymentForm.data.gpch_product;
				window.rnw.tamaro.instance.paymentForm.data.stored_sf_Opportunity_Product__c = '';
			}
		}

		window.rnw.tamaro.events.beforePaymentValidateAndSend.subscribe(gpchTamaro.callbackBeforePaymentValidateAndSend);

		gpchTamaro.nextStep = function() {
			tamaroFullForm = true;

			rnw.tamaro.instance.config.forceShowBlocks = {
				slot_gpch_next_step_button: false,
				payment_payment_methods: true,
				payment_profile: true,
				payment_address: true,
				payment_cover_fee: true
			};

			rnw.tamaro.instance.config.showSubmitButton = true;
			rnw.tamaro.instance.config.showFooter = true;
		}

		// Generate a gp_user_id from the email address
		async function generate_gp_user_id(email) {
			function bufferToBase64(buffer) {
				return btoa(String.fromCharCode.apply(null, new Uint8Array(buffer)));
			}

			try {
				const hashBuffer = await crypto.subtle.digest('SHA-256', new TextEncoder().encode(email));
				let hashString = bufferToBase64(hashBuffer);
				hashString = hashString.replace(/\//g, '');
				return hashString;
			} catch (error) {
				return '';
			}
		}

		// DataLayer Event for web analytics
		window.rnw.tamaro.events["paymentComplete"].subscribe(async function (event) {
			let donation_type = "Single";
			donation_frequency = "One-time";
			if (event.data.api.paymentForm !== null) {
				if (event.data.api.paymentForm.data.payment_type === "recurring") {
					donation_type = "Recurring";
					donation_frequency = event.data.api.paymentForm.data.recurring_interval;
				}
			}

			const hashed_email = await generate_gp_user_id(event.data.api.paymentForm.data.stored_customer_email);

			if (typeof event.data.api.transactionInfo !== "undefined") {
				// Use legacy RaiseNow Manager data
				if (event.data.api.transactionInfo.epayment_status === "success") {
					window.dataLayer = window.dataLayer || [];
					window.dataLayer.push({
						'event': 'donation_completed',
						'donation_type': donation_type,
						'donation_value': event.data.api.paymentForm.data.amount,
						'donation_currency': event.data.api.paymentForm.data.currency,
						'donation_frequency': donation_frequency,
						'donation_payment_method': event.data.api.paymentForm.data.payment_method,
						'donation_campaign_id': event.data.api.paymentForm.data.stored_campaign_id,
						'donation_product': event.data.api.paymentForm.data.gpch_product,
						'donation_transaction_id': event.data.api.transactionInfo.epp_transaction_id,
						'gp_user_id': hashed_email
					});
				}
			}
			else if (typeof event.data.api.epmsPaymentInfo !== "undefined") {
				// Use RaiseNow Hub data
				if (event.data.api.epmsPaymentInfo.last_status === "succeeded") {
					window.dataLayer = window.dataLayer || [];
					window.dataLayer.push({
						'event': 'donation_completed',
						'donation_type': donation_type,
						'donation_value': event.data.api.paymentForm.data.amount,
						'donation_currency': event.data.api.paymentForm.data.currency,
						'donation_frequency': donation_frequency,
						'donation_payment_method': event.data.api.paymentForm.data.payment_method,
						'donation_campaign_id': event.data.api.paymentForm.data.stored_campaign_id,
						'donation_product': event.data.api.paymentForm.data.gpch_product,
						'donation_transaction_id': event.data.api.epmsPaymentInfo.uuid,
						'gp_user_id': hashed_email
					});
				}
			}
		});

		// Tracks if an observer was already started
		let observerStarted = false;

		/**
		 * Monitors and modifies the content of the widget and modified it in certain conditions:
		 * - When the subscription info is shown: Moves the unsubscribe section to the bottom
		 * - When payment methods are changed and the current method is PostFinance: Remove the current method so it
		 * can't be selected anymore.
		 */
		const observeWidgetContent = (event) => {
			// Node to observe
			const widgetContentElement = document.querySelector("#tamaro-widget");
			
			// Callback to modify the widget content
			const modifyWidgetContent = (mutationList, observer) => {
				for (const mutation of mutationList) {
					if (mutation.type === "childList") {
						// Look for subscription info sections
						const sections = document.querySelectorAll("section.subscription-info .main section");

						if (typeof(sections[0]) !== 'undefined' && sections[0].classList.contains('subscription-details')) {
							// Change element order
							sections[2].append(sections[0])

							// Adapt styling to new order
							sections[0].style.borderTopWidth = '1px';
							sections[0].style.marginTop = '1.25rem';
							sections[0].style.paddingTop = '1.25rem';
							sections[1].style.borderTopWidth = '0';
							sections[1].style.marginTop = '0';
							sections[1].style.paddingTop = '0';
						}

						// Look for PostFinance as current payment method
						const currentMethodElement = document.querySelector("section.update-current-payment-method");

						if (currentMethodElement !== null) {
							// PostFinance button as current payment method
							const pfcButton = currentMethodElement.querySelector("button.payment-method.pfc.current");

							if (pfcButton !== null) {
								currentMethodElement.style.display = 'none';
							}
						}
					}
				}
			}

			if (widgetContentElement !== null && observerStarted === false) {
				// Observer config
				const config = { attributes: false, childList: true, subtree: true };

				// Create an observer instance linked to the callback function
				const observer = new MutationObserver(modifyWidgetContent);

				// Start observing the target node for configured mutations
				observer.observe(widgetContentElement, config);

				observerStarted = true;
			}
		}
		window.rnw.tamaro.events.fetchPaymentDataEnd.subscribe(observeWidgetContent);

	</script>
</div>

